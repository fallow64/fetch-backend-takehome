----------------------------------------------------------------------------------------------------
1. Why did you choose the tools, libraries, and language you used for the coding exercise?

I chose the following tech stack:
   - Prisma, SQLite, Elysia, Bun, TypeScript

I chose these tools because they were the most familiar to me. I started the project with Go to
learn a bit more about Go and web servers, but I found myself Googling a lot of questions. During
the info session, I heard that "Fetch will teach you Go," so I'd rather showcase my experience
than stumble through a language I'm not confident in.

----------------------------------------------------------------------------------------------------
2. What are the advantages and disadvantages of your solution?

Due to the small scope of the project, I didn't break down my code further, compared to something
like an entire MVC pattern. Due to this, the logic inside of `db.ts` would need to be refactored
if, say, I was tasked with attaching users to specific transactions.

However, because of the small code size, the overall project is easier to understand.

Technology Pros & Cons:

  - Prisma / SQLite
      - Pros:
          - Easy-to-read database code with Prisma.
          - Local file databases with SQLite, making local testing deployments easy.
      - Cons:
          - A highly-involved ORM like Prisma can lead to hidden inefficient queries.
          - While SQLite is a reasonable choice for file-based databases, it is not optimal for
            a cloud-based solution.

  - Elysia / Bun / TypeScript
      - Pros:
          - Types in JavaScript are essential for production code, and greatly improves developer
            experience.
          - Elysia is many times more faster than most other back-end (JS) frameworks.
          - Bun is a faster JavaScript runtime than Node/Deno.
      - Cons:
          - Bun and Elysia are very new technologies that both recently just hit 1.0, and probably
            shouldn't be trusted with production code.
          - With Elysia, you are forced to define your routes weirdly (using their daisy-chaining),
            making code harder to seperate and harder to on-board people with.
          - Anything JavaScript will never run as fast as native code (like Go) written correctly.

----------------------------------------------------------------------------------------------------
3. What has been a favorite school/personal project thus far? What about it that challenged you?

My favorite project so far was a programming language I made called "Flama". When I was a kid,
there was a Minecraft coding platform called DiamondFire that was created for beginners and kids,
and through that platform, I learned how to code. As I grew older, I thought it'd be a fun project
to make the in-game code more manageable by creating a custom programming language and converting
it to the block code.

I found a book called Crafting Interpreters by Bob Nystrom that I really enjoyed reading, and so I
reapplied the concepts for my own language, and started creating.

I had a lot of attempts before creating Flama. The most challenging part for me was seeing it
through to the end; I would make it half-way through and be making good progress, but other
responsibilities took up time, so I'd eventually forget about it. Then, a month later, the
programming bug would bite again, and so I'd try a new attempt, with a new technology (like making
it in Go, Rust, TypeScript, etc). I learned a lot through this process, but at the end of the day,
I didn't have anything to show for it. Finally, during the summer, I was able to power through it,
and I ended up with a completed project that I was passionate about.
